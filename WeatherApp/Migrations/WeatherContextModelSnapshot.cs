// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApp.Persistence;

namespace WeatherApp.Migrations
{
    [DbContext(typeof(WeatherContext))]
    partial class WeatherContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherApp.Model.AdministrativeArea", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryId");

                    b.ToTable("AdministrativeAreas");
                });

            modelBuilder.Entity("WeatherApp.Model.City", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdministrativeAreaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlias")
                        .HasColumnType("bit");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCityKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.HasIndex("AdministrativeAreaId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherApp.Model.Country", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WeatherApp.Model.DailyForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DayId")
                        .HasColumnType("int");

                    b.Property<int>("EpochDate")
                        .HasColumnType("int");

                    b.Property<int?>("FiveDaysForcastId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NightId")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("FiveDaysForcastId");

                    b.HasIndex("NightId");

                    b.HasIndex("TemperatureId");

                    b.ToTable("DailyForecast");
                });

            modelBuilder.Entity("WeatherApp.Model.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasPrecipitation")
                        .HasColumnType("bit");

                    b.Property<int>("Icon")
                        .HasColumnType("int");

                    b.Property<string>("IconPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("WeatherApp.Model.FiveDaysForcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HeadlineId")
                        .HasColumnType("int");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HeadlineId");

                    b.HasIndex("LocationId");

                    b.ToTable("FiveDaysForcasts");
                });

            modelBuilder.Entity("WeatherApp.Model.Headline", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EffectiveEpochDate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndEpochDate")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Headline");
                });

            modelBuilder.Entity("WeatherApp.Model.Maximum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Maximum");
                });

            modelBuilder.Entity("WeatherApp.Model.Minimum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Minimum");
                });

            modelBuilder.Entity("WeatherApp.Model.Night", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasPrecipitation")
                        .HasColumnType("bit");

                    b.Property<int>("Icon")
                        .HasColumnType("int");

                    b.Property<string>("IconPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Night");
                });

            modelBuilder.Entity("WeatherApp.Model.Region", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("WeatherApp.Model.Temperature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaximumId")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaximumId");

                    b.HasIndex("MinimumId");

                    b.ToTable("Temperature");
                });

            modelBuilder.Entity("WeatherApp.Model.TimeZone", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("GmtOffset")
                        .HasColumnType("float");

                    b.Property<bool>("IsDaylightSaving")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("WeatherApp.Model.AdministrativeArea", b =>
                {
                    b.HasOne("WeatherApp.Model.Country", "Country")
                        .WithMany("AdministrativeAreas")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WeatherApp.Model.City", b =>
                {
                    b.HasOne("WeatherApp.Model.AdministrativeArea", "AdministrativeArea")
                        .WithMany("Cities")
                        .HasForeignKey("AdministrativeAreaId");

                    b.HasOne("WeatherApp.Model.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.HasOne("WeatherApp.Model.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("WeatherApp.Model.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId");

                    b.Navigation("AdministrativeArea");

                    b.Navigation("Country");

                    b.Navigation("Region");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("WeatherApp.Model.Country", b =>
                {
                    b.HasOne("WeatherApp.Model.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("WeatherApp.Model.DailyForecast", b =>
                {
                    b.HasOne("WeatherApp.Model.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayId");

                    b.HasOne("WeatherApp.Model.FiveDaysForcast", null)
                        .WithMany("DailyForecasts")
                        .HasForeignKey("FiveDaysForcastId");

                    b.HasOne("WeatherApp.Model.Night", "Night")
                        .WithMany()
                        .HasForeignKey("NightId");

                    b.HasOne("WeatherApp.Model.Temperature", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureId");

                    b.Navigation("Day");

                    b.Navigation("Night");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("WeatherApp.Model.FiveDaysForcast", b =>
                {
                    b.HasOne("WeatherApp.Model.Headline", "Headline")
                        .WithMany()
                        .HasForeignKey("HeadlineId");

                    b.HasOne("WeatherApp.Model.City", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Headline");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("WeatherApp.Model.Temperature", b =>
                {
                    b.HasOne("WeatherApp.Model.Maximum", "Maximum")
                        .WithMany()
                        .HasForeignKey("MaximumId");

                    b.HasOne("WeatherApp.Model.Minimum", "Minimum")
                        .WithMany()
                        .HasForeignKey("MinimumId");

                    b.Navigation("Maximum");

                    b.Navigation("Minimum");
                });

            modelBuilder.Entity("WeatherApp.Model.AdministrativeArea", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WeatherApp.Model.Country", b =>
                {
                    b.Navigation("AdministrativeAreas");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WeatherApp.Model.FiveDaysForcast", b =>
                {
                    b.Navigation("DailyForecasts");
                });

            modelBuilder.Entity("WeatherApp.Model.Region", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
